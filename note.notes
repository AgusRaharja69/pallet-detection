TASK THESIS:
1.  Method 1, Record data
2.  Method 2, Record data
3.  Method 3, Point cloud, setting posisi camera dengan point cloud LiDAR, Record Data
    ///////
    The overlap between a 2D lidar and an RGB image would be a line of pixels.

    If you have a feature detection in the RGB image that corresponds with that overlap, k
    then yes, its presumably possible to use the LIDAR information to fuse or 
    register the detection with the pointcloud or scan.

    if the goal is just camera calibration,
    there are usually ways that don't involve direct depth measurement
    (such as printing out a checkerboard)

Command training model :
py train.py --img 320 --batch 8 --epochs 50 --data data.yaml --device 0 --weights yolov5n.pt
py train.py --img 320 --batch 8 --epochs 10 --data data.yaml --device 0 --weights yolov5n.pt

Command detection:
py detectPallet.py --source 1 --device 0 --weights runs/train/exp21/weights/best.pt --weights-name yolov5n-100 --img 320
py yoloDetection.py --weights runs/train/exp16/weights/best.pt --weights-name yolov5s-100 --img 320

Weights name:
- yolov5m-10 : exp11
- yolov5m-25 : exp12
- yolov5m-50 : exp13
- yolov5m-75 : exp14
- yolov5m-100 : exp15
//
- yolov5s-100 : exp16
- yolov5s-75 : exp17
- yolov5s-50 : exp18
- yolov5s-25 : exp19
- yolov5s-10 : exp20
//
- yolov5n-100 : exp21
- yolov5n-75 : exp22
- yolov5n-50 : exp23
- yolov5n-25 : exp27
- yolov5n-10 : exp28

################## RUN DATA ##################
Focal length camera:
yolov5m [952.0,954.0,954.0,952.0,954.0,952.0,952.0,952.0,952.0,954.0,952.0,952.0,954.0,952.0,952.0,952.0,952.0,954.0,954.0,952.0,954.0,952.0,952.0,954.0,954.0,952.0,952.0,952.0,952.0,954.0,954.0,952.0,954.0,952.0,952.0,954.0,952.0,952.0,952.0,954.0,952.0,952.0,952.0,952.0,952.0,952.0,954.0,954.0,952.0]
yolov5s [992.0,988.0,988.0,980.0,988.0,996.0,986.0,986.0,992.0,984.0,984.0,990.0,996.0,994.0,996.0,986.0,990.0,994.0,988.0,996.0,982.0,994.0,980.0,980.0,992.0,988.0,990.0,990.0,990.0,990.0,996.0,996.0,992.0,998.0,998.0,992.0,990.0,986.0,982.0,994.0,984.0,994.0,990.0,982.0,988.0,988.0,984.0,996.0,980.0,994.0,988.0,990.0,984.0,990.0,992.0,986.0,996.0,996.0,974.0,988.0,988.0,978.0,988.0,990.0,990.0,990.0,976.0,978.0,988.0,986.0,990.0,990.0,998.0,992.0,982.0,992.0,992.0,988.0,990.0,990.0,986.0,990.0,986.0,992.0,990.0,992.0,994.0,994.0,994.0,994.0,990.0,990.0,992.0,986.0,992.0,994.0,994.0,986.0,992.0,994.0,984.0,990.0,998.0,992.0,988.0,994.0,984.0,980.0,982.0,994.0,994.0,982.0,994.0,982.0,982.0,992.0,992.0,994.0,994.0,992.0,992.0,990.0,994.0,982.0,994.0,984.0,984.0,992.0,994.0,996.0,992.0,992.0,986.0,994.0,990.0,980.0,988.0,988.0,970.0,988.0,988.0,982.0,982.0,990.0,990.0,986.0,990.0,990.0,988.0,992.0,994.0,980.0,994.0,988.0,990.0,986.0,982.0]
yolov5n [980.0,982.0,970.0,982.0,966.0,966.0,976.0,980.0,986.0,982.0,962.0,980.0,968.0,976.0,962.0,968.0,968.0,984.0,980.0,984.0,982.0,976.0,978.0,972.0,974.0,984.0,988.0,976.0,954.0,974.0,974.0,976.0,976.0,974.0,974.0,980.0,974.0,968.0,968.0,982.0,972.0,978.0,978.0,976.0,980.0,956.0,972.0,980.0,954.0,976.0,980.0,978.0,988.0,980.0,978.0,978.0,978.0,976.0,976.0,984.0,964.0,964.0,982.0,978.0,984.0,964.0,988.0,988.0,980.0,992.0]

Distance using method 1:
[1] 100
m1 (99.797) = [99.655,99.864,99.864,99.864,99.655,99.865,99.655,99.864,99.655,99.655,99.865,99.655,99.655,100.074,99.864,100.074,99.865,99.655,99.655,99.864,99.655,99.864,99.864,99.864,99.864,99.655,99.655,99.655,99.864,99.864,100.074]
s1 (101.208) = [101.34,101.34,101.132,101.132,100.927,101.132,100.721,101.133,103.039,101.132,101.34,101.133,101.133,101.133,100.927,101.134,101.34,101.133,101.34,101.133,101.133,101.133,101.34,101.133,100.927,100.927,101.132,100.927,101.133,101.34,101.548]
n1 (102.874) = [103.387,103.169,105.863,102.515,102.515,103.609,102.517,102.302,101.661,102.302,102.302,104.051,102.517,102.517,102.517,100.818,102.302,102.951,102.951,103.609,102.517,102.517,102.517,101.875,102.951,103.829,103.829,102.951,102.086,104.053,103.609]
[2] 150
[3] 200
[4] 250
[5] 300
[6] 350

LiDAR real world potition:
h_LiDAR = 10.5 cm
h_camera = 14.5 cm

########## 21/06/23 ##########
kalibrasi :

D:\TESIS\THESIS_3\program\pallet-detection\data-collection\camera-callibration>py camera_calli_img.py
total error: 0.02285955187370706
 Camera matrix:
[[1.51524349e+03 0.00000000e+00 3.65908321e+02]
 [0.00000000e+00 1.44932731e+03 3.27483973e+02]
 [0.00000000e+00 0.00000000e+00 1.00000000e+00]]

 Distortion coefficient:
[[-2.32701187e-01  1.12870600e+01  2.71129011e-03  1.70226889e-02
  -1.00357243e+02]]

 Rotation Vector:
[array([[ 0.08974448],
       [-0.34889318],
       [-0.00065488]]), array([[ 0.08929608],
       [-0.3495648 ],
       [-0.00070519]]), array([[ 0.08961902],
       [-0.34925312],
       [-0.00067873]])]

 Rotation Matrix:
[array([[ 0.93979196, -0.01484622, -0.34142446],
       [-0.01612784,  0.99601612, -0.08770284],
       [ 0.34136632,  0.08792886,  0.9358085 ]]), array([[ 0.93956187, -0.01474883, -0.34206135],
       [-0.0161288 ,  0.99605592, -0.08724945],
       [ 0.34199906,  0.0874933 ,  0.93561828]]), array([[ 0.93966881, -0.01481693, -0.34176453],
       [-0.01614516,  0.99602731, -0.08757246],
       [ 0.34170436,  0.08780695,  0.93569657]])]

 Translation Vectors:
[array([[-291.71344798],
       [-390.74731084],
       [2236.65797545]]), array([[-291.62871742],
       [-390.67142717],
       [2236.02927475]]), array([[-291.66729163],
       [-390.67521205],
       [2236.19909371]])]

- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:
- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:

D:\TESIS\THESIS_3\program\pallet-detection\data-collection\camera-callibration\calli_dfov>py camera_calii_dfov.py
 Camera matrix:
[[521.72737903   0.         255.7938803 ]
 [  0.         499.4948742  244.34969476]
 [  0.           0.           1.        ]]

 Distortion coefficient:
[[-0.51126399  1.97807254 -0.06445     0.01816105 -3.60575746]]

 Rotation Vectors:
[array([[ 0.98869398, -0.00655296, -0.14980409],
       [ 0.00221329,  0.99957355, -0.02911737],
       [ 0.14993101,  0.02845661,  0.98828686]]), array([[ 0.98843084, -0.00636175, -0.15153876],
       [ 0.00222148,  0.99962002, -0.0274752 ],
       [ 0.15165597,  0.02682069,  0.98806939]]), array([[ 0.98865173, -0.00654364, -0.15008309],
       [ 0.00236245,  0.99960455, -0.02802058],
       [ 0.1502071 ,  0.02734803,  0.98827623]])]

 Translation Vectors:
[array([[-2.02784433],
       [-4.01880505],
       [12.10935136]]), array([[-2.02690942],
       [-4.01881167],
       [12.10776663]]), array([[-2.02775131],
       [-4.02004806],
       [12.11516881]])]

D:\TESIS\THESIS_3\program\pallet-detection\data-collection\camera-callibration>py test_fusion.py
camera_matrix:  [[1.57034678e+03 0.00000000e+00 3.75793671e+02]
 [0.00000000e+00 1.49880818e+03 3.65519559e+02]
 [0.00000000e+00 0.00000000e+00 1.00000000e+00]]
rvecs:  [array([[ 0.08995302],
       [-0.36658966],
       [-0.00513899]])]
tvecs:  [array([[-4.71874415],
       [-6.94724055],
       [35.31130224]])]

rotation_matrix:  [[ 0.93358714 -0.01127525 -0.35817302]
 [-0.02131085  0.995989   -0.0869009 ]
 [ 0.35771622  0.08876254  0.92960224]]

translation_vector:  [-0.47187442  3.52812558 -0.47187442]

extrinsic_matrix:  [[ 0.93358714 -0.01127525 -0.35817302 -0.47187442]
 [-0.02131085  0.995989   -0.0869009   3.52812558]
 [ 0.35771622  0.08876254  0.92960224 -0.47187442]
 [ 0.          0.          0.          1.        ]]
camera_to_lidar:  [[ 0.93358714 -0.02131085  0.35771622  0.68452038]
 [-0.01127525  0.995989    0.08876254 -3.47740999]
 [-0.35817302 -0.0869009   0.92960224  0.57624013]
 [ 0.          0.          0.          1.        ]]


- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:
- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:

D:\TESIS\THESIS_3\program\pallet-detection\data-collection>py callibration-camera.py
camera_matrix:  [[502.56912538   0.         371.18295742]
 [  0.         518.77865677 123.60822693]
 [  0.           0.           1.        ]]
rotation_matrix:  [[ 0.98450658 -0.03044044 -0.17268519]
 [ 0.02700893  0.99938894 -0.022187  ]
 [ 0.17325505  0.0171792   0.98472715]]
translation_vector:  [-0.47797807  3.52202193 -0.47797807]
extrinsic_matrix:  [[ 0.98450658 -0.03044044 -0.17268519 -0.47797807]
 [ 0.02700893  0.99938894 -0.022187    3.52202193]
 [ 0.17325505  0.0171792   0.98472715 -0.47797807]
 [ 0.          0.          0.          1.        ]]
camera_to_lidar:  [[ 0.98450658  0.02700893  0.17325505  0.45825861]
 [-0.03044044  0.99938894  0.0171792  -3.52620835]
 [-0.17268519 -0.022187    0.98472715  0.46628134]
 [ 0.          0.          0.          1.        ]]

 #########################################################################

 D:\TESIS\THESIS_3\program\pallet-detection\data-collection>py callibration-camera.py
camera_matrix:  [[437.81464946   0.         250.51843603]
 [  0.         421.31344926 242.87899323]
 [  0.           0.           1.        ]]
rvecs:  [array([[ 0.03218379],
       [-0.12510692],
       [ 0.00694219]]), array([[ 0.0339637 ],
       [-0.12636521],
       [ 0.00695457]]), array([[ 0.19695449],
       [ 0.05578015],
       [-3.12794708]]), array([[ 0.03537758],
       [-0.12708215],
       [ 0.00673974]]), array([[ 0.03510831],
       [-0.12647413],
       [ 0.00676865]])]
tvecs:  [array([[-1.88431708],
       [-3.98587403],
       [10.16658168]]), array([[-1.88354545],
       [-3.98531132],
       [10.16492199]]), array([[ 4.03196567],
       [ 0.04094024],
       [11.05465452]]), array([[-1.88257905],
       [-3.98416536],
       [10.15913529]]), array([[-1.88342074],
       [-3.98439278],
       [10.16006188]])]
dist:  [[-0.39328142  1.14971779 -0.05502625  0.01450477 -1.59749278]]

rotation_matrix:  [[ 0.99216097 -0.00893324 -0.1246467 ]
 [ 0.00491244  0.99945876 -0.03252774]
 [ 0.12486981  0.03166044  0.99166786]]

translation_vector:  [-0.18843171  3.81156829 -0.18843171]

extrinsic_matrix:  [[ 0.99216097 -0.00893324 -0.1246467  -0.18843171]
 [ 0.00491244  0.99945876 -0.03252774  3.81156829]
 [ 0.12486981  0.03166044  0.99166786 -0.18843171]
 [ 0.          0.          0.          1.        ]]
camera_to_lidar:  [[ 0.99216097  0.00491244  0.12486981  0.19175992]
 [-0.00893324  0.99945876  0.03166044 -3.8052228 ]
 [-0.1246467  -0.03252774  0.99166786  0.28735599]
 [ 0.          0.          0.          1.        ]]


#####################################################
#####################################################
 Estimated camera_matrix:
[[6.82666667e+03 0.00000000e+00 3.20000000e+02]
 [0.00000000e+00 6.82666667e+03 2.40000000e+02]
 [0.00000000e+00 0.00000000e+00 1.00000000e+00]]

Estimated rotation_matrix:
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]

Estimated translation_vector:
[0. 4. 0.]